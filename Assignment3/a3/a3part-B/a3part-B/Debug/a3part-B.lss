
AVRASM ver. 2.2.8  H:\Assignment3\a3\a3part-B\a3part-B\a3part-B.asm Tue Nov 22 21:01:54 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m2560def.inc'
H:\Assignment3\a3\a3part-B\a3part-B\a3part-B.asm(68): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m2560def.inc'
H:\Assignment3\a3\a3part-B\a3part-B\a3part-B.asm(69): Including file 'H:\Assignment3\a3\a3part-B\a3part-B\lcd.asm'
H:\Assignment3\a3\a3part-B\a3part-B\lcd.asm(122): LCD_SIZE not set, using default values.
H:\Assignment3\a3\a3part-B\a3part-B\lcd.asm(132): LCD_DISPLAY_SET not set, using default values.
H:\Assignment3\a3\a3part-B\a3part-B\lcd.asm(143): LCD_CURSOR_SET not set, using default values.
H:\Assignment3\a3\a3part-B\a3part-B\lcd.asm(153): LCD_INTERFACE_SET not set, using default values.
H:\Assignment3\a3\a3part-B\a3part-B\lcd.asm(164): LCD_SHIFT_SET not set, using default values.
H:\Assignment3\a3\a3part-B\a3part-B\lcd.asm(206): Including file 'H:\Assignment3\a3\a3part-B\a3part-B\LCDdefs.inc'
H:\Assignment3\a3\a3part-B\a3part-B\LCDdefs.inc(23): LCD Driver loaded, LCD_LIBONLY not set. Running default program code.
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m2560def.inc'
H:\Assignment3\a3\a3part-B\a3part-B\a3part-B.asm(68): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m2560def.inc'
H:\Assignment3\a3\a3part-B\a3part-B\a3part-B.asm(69): Including file 'H:\Assignment3\a3\a3part-B\a3part-B\lcd.asm'
H:\Assignment3\a3\a3part-B\a3part-B\lcd.asm(206): Including file 'H:\Assignment3\a3\a3part-B\a3part-B\LCDdefs.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; a3part-B.asm
                                 ;
                                 ; Part B of assignment #3
                                 ;
                                 ;
                                 ; Student name:Ryo Tabata
                                 ; Student ID:v00967093
                                 ; Date of completed work:NOV 15th 
                                 ;
                                 ; **********************************
                                 ; Code provided for Assignment #3
                                 ;
                                 ; Author: Mike Zastre (2022-Nov-05)
                                 ;
                                 ; This skeleton of an assembly-language program is provided to help you 
                                 ; begin with the programming tasks for A#3. As with A#2 and A#1, there are
                                 ; "DO NOT TOUCH" sections. You are *not* to modify the lines within these
                                 ; sections. The only exceptions are for specific changes announced on
                                 ; Brightspace or in written permission from the course instruction.
                                 ; *** Unapproved changes could result in incorrect code execution
                                 ; during assignment evaluation, along with an assignment grade of zero. ***
                                 ;
                                 
                                 
                                 ; =============================================
                                 ; ==== BEGINNING OF "DO NOT TOUCH" SECTION ====
                                 ; =============================================
                                 ;
                                 ; In this "DO NOT TOUCH" section are:
                                 ; 
                                 ; (1) assembler direction setting up the interrupt-vector table
                                 ;
                                 ; (2) "includes" for the LCD display
                                 ;
                                 ; (3) some definitions of constants that may be used later in
                                 ;     the program
                                 ;
                                 ; (4) code for initial setup of the Analog-to-Digital Converter
                                 ;     (in the same manner in which it was set up for Lab #4)
                                 ;
                                 ; (5) Code for setting up three timers (timers 1, 3, and 4).
                                 ;
                                 ; After all this initial code, your own solutions's code may start
                                 ;
                                 
                                 .cseg
                                 .org 0
000000 940c 0204                 	jmp reset
                                 
                                 ; Actual .org details for this an other interrupt vectors can be
                                 ; obtained from main ATmega2560 data sheet
                                 ;
                                 .org 0x22
000022 940c 02d3                 	jmp timer1
                                 
                                 ; This included for completeness. Because timer3 is used to
                                 ; drive updates of the LCD display, and because LCD routines
                                 ; *cannot* be called from within an interrupt handler, we
                                 ; will need to use a polling loop for timer3.
                                 ;
                                 ; .org 0x40
                                 ;	jmp timer3
                                 
                                 .org 0x54
000054 940c 0309                 	jmp timer4
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .include "lcd.asm"
                                 
                                 ; HD44780 LCD Driver for ATmega2560.
                                 ; (DFRobot LCD Keypad Shield v1.1, Arduino Mega2560)
                                 ;
                                 ; Title: 		LCD.asm
                                 ; Description: 	LCD Configuration and Subroutines
                                 ; Author: 		Keegan van der Laag (jkvander@uvic.ca)
                                 ; Updated:		23 February 2015
                                 
                                 ; ---
                                 ;
                                 ; Some code shamelessly adapted from the C implementation of an HD44780
                                 ; driver by Peter Dannegger, posted to the AVR Freaks forum. The original
                                 ; driver is available here:
                                 ;
                                 ; http://www.avrfreaks.net/forum/tutc-lcd-tutorial-1001?name=PNphpBB2&file=viewtopic&t=102296
                                 ; 
                                 ; Delay loops hackishly paraphrased from Atmel's AVR C libraries.
                                 ;
                                 ; This module provides configuration, initialization, and control
                                 ; routines for a Hitachi HD44780-compatible LCD controller connected
                                 ; to an Atmel AVR microcontroller unit. It makes the following asusmptions:
                                 ; 	- The R/W pin on the HD44780 is permanently grounded, making it
                                 ;	  impossible to read the busy flag from the controller.
                                 ;	- Similarly, the DDRAM and CGRAM addresses cannot be read from the
                                 ;	  controller, meaning that the cursor position must be manually tracked
                                 ;	  and updated to match the LCD if cursor position is important to you.
                                 ;	- The HD44780 is being operated in 4-bit mode rather than 8-bit.
                                 ;	- Only one HD44780 is connected. (No ridiculously large matrices of 
                                 ;	  characters.)
                                 ;
                                 ; Also, the busy-wait delays used for the timing of LCD initialization and
                                 ; commands currently assume that the AVR MCU is running at 16 MHz. This is
                                 ; by laziness, not by design; it will be corrected in a future version.
                                 ;
                                 ; This module #includes a definition file for an unwieldy and sizable number
                                 ; of LCD-related symbols and values. This file is called LCDdefs.inc, and
                                 ; should be located in the project directory with this module, or in the
                                 ; main include directory of your AVR Toolchain installation.
                                 ;
                                 ; When including this module in your project, it is important to #define
                                 ; the symbol LCD_LIB_ONLY to keep this file from trying to run the default
                                 ; initialization and program loop written into the driver.
                                 ;
                                 ; LCD pin and port assignment, as well as setting things like LCD size in
                                 ; columns and rows, and the collection of HD44780 display modes and settings,
                                 ; can be done either here in the header #defines, or in the header of the
                                 ; program including the driver. In order for the program to assemble, the
                                 ; following symbols must be defined, as well as their listed children:
                                 ;
                                 ;	LCD_SIZE
                                 ;		LCD_ROW 				(n = 1, 2, 4)
                                 ;		LCD_COLUMN				(n = 8, 12, 16, 20, 24, 40)
                                 ;	LCD_DISPLAY_SET
                                 ;		LCD_SHOW_CURSOR			(n = 0, 1)
                                 ;		LCD_BLINK_CURSOR		(n = 0, 1)
                                 ;		LCD_DISPLAY_ON			(n = 0, 1)
                                 ;	LCD_INTERFACE_SET
                                 ;		LCD_INTERFACE_WIDTH		(n = 0, 1)
                                 ;		LCD_LINE_COUNT			(n = 0, 1)
                                 ;		LCD_FONT_SIZE			(n = 0, 1)
                                 ;	LCD_CURSOR SET
                                 ;		LCD_CURSOR_DIR			(n = 0, 1)
                                 ;		LCD_DISPLAY_SHIFT		(n = 0, 1)
                                 ;	LCD_SHIFT_SET
                                 ;		LCD_MOVE_SHIFT			(n = 0, 1)
                                 ;		LCD_SHIFT_DIR			(n = 0, 1)
                                 ;	LCD_INTERFACE_PORTS
                                 ;		LCD_PORT_D4				All LCD ports must be set using .equ
                                 ;		LCD_PORT_D5				rather than #define, and must be the
                                 ;		LCD_PORT_D6				memory address of an I/O port.
                                 ;		LCD_PORT_D7				This uses values from your Atmel partdef
                                 ;		LCD_PORT_RS				include, and so I/O space offset does not
                                 ;		LCD_PORT_ENA			need to be applied. Use of .equ is for
                                 ;								compatibility with Atmel's partdefs. Use 
                                 ;								the defaults provided here as an example.
                                 ;		LCD_PIN_D4
                                 ;		LCD_PIN_D5
                                 ;		LCD_PIN_D6				Pins are bit numbers within a port,
                                 ;		LCD_PIN_D7				(0 <= n <= 7)
                                 ;		LCD_PIN_RS
                                 ;		LCD_PIN_ENA
                                 ;
                                 ; Wherever possible, if something is defined in the including program, I've
                                 ; tried to have this driver defer to those definitions. Similarly, if there's
                                 ; anywhere something isn't defined and it should be, I've attempted to have the
                                 ; driver spit out a helpful assembler error. By and large, if an entire block of
                                 ; things is not defined, the driver will use default values. (Pin assignments,
                                 ; LCD size, display modes and settings, etc.) If individual values are not defined
                                 ; (for instance, a specific port or pin, LCD rows but not columns, Display mode
                                 ; but not whether to show/hide the cursor, etc) the assembler will error and tell
                                 ; you to define them. It should also do a pretty good job of letting you know if
                                 ; you've accidentally set an LCD size that isn't supported by the HD44780
                                 ;
                                 ; To this end, there is a LOT of conditional assembly here, which is why I've tried
                                 ; to do most of it in the included definitions file. If you want to make changes
                                 ; to the way the LCD behaves by default, it can be done using the settings in this
                                 ; module's header. You shouldn't need to modify anything in LCDdefs.inc, unless I've
                                 ; done something really, heinously wrong.
                                 
                                 ; The lcd_putchar/lcd_puts routines should include functionality for
                                 ; automatically updating the cursor row/column values stored in memory,
                                 ; as well as automatically overflowing to the next line if necessary. For
                                 ; application reasons, this version of the driver has this functionality
                                 ; removed.
                                 
                                 ; End Notes
                                 ; ***
                                 
                                 ; If no partdef file has been included yet, include the partdef for
                                 ; the ATmega2560.
                                 .ifndef SIGNATURE_000
                                 .endif
                                 
                                 
                                 ; Define the LCD size in rows x columns. Constants are conditionally
                                 ; determined based on this, and should be compatible with any HD44780
                                 ; controlled display.
                                 #ifndef LCD_SIZE
                                 #define LCD_SIZE
                                 #message "LCD_SIZE not set, using default values."
                                 
                                 	#define LCD_ROW			2
                                 	#define LCD_COLUMN		16
                                 
                                 #endif
                                 
                                 
                                 #ifndef LCD_DISPLAY_SET
                                 #define LCD_DISPLAY_SET
                                 #message "LCD_DISPLAY_SET not set, using default values."
                                 
                                 	#define LCD_SHOW_CURSOR		0	; Show cursor = 1, Hide cursor = 0
                                 	#define LCD_BLINK_CURSOR	0	; Blink on = 1, off = 0
                                 	#define LCD_DISPLAY_ON		1	; Entire Display On = 1, Off = 0
                                 
                                 #endif
                                 
                                 
                                 #ifndef LCD_CURSOR_SET
                                 #define LCD_CURSOR_SET
                                 #message "LCD_CURSOR_SET not set, using default values."
                                 
                                 	#define LCD_CURSOR_DIR		1	; Increment = 1, Decrement = 0
                                 	#define LCD_DISPLAY_SHIFT	0	; Display shift on = 1, off = 0
                                 
                                 #endif
                                 
                                 
                                 #ifndef LCD_INTERFACE_SET
                                 #define LCD_INTERFACE_SET
                                 #message "LCD_INTERFACE_SET not set, using default values."
                                 
                                 	#define LCD_INTERFACE_WIDTH	0	; 4-bit = 0, 8-bit = 1
                                 	#define LCD_LINE_COUNT		1	; 1 line = 0, 2 lines = 1
                                 	#define LCD_FONT_SIZE		0	; 5x8 dot = 0, 5x10 dot = 1
                                 
                                 #endif
                                 
                                 
                                 #ifndef LCD_SHIFT_SET
                                 #define LCD_SHIFT_SET
                                 #message "LCD_SHIFT_SET not set, using default values."
                                 
                                 	#define LCD_MOVE_SHIFT		0	; Move cursor = 0, Shift display = 1
                                 	#define LCD_SHIFT_DIR		0	; Shift left = 0, Shift right = 1
                                 
                                 #endif
                                 
                                 
                                 ; ***
                                 ; LCD Pin Definitions.
                                 ; Changing these should affect lcd_init, lcd_nbl, lcd_byte, and lcd_putchar
                                 ; These default assignments are for the Arduino Mega2560 with DFRobot LCD
                                 ; Keypad Shield. Symbols used must be defined in the Atmel AVR partdef file
                                 ; used, or you're going to have a bad time.
                                 
                                 .ifndef LCD_INTERFACE_PORTS
                                 .set LCD_INTERFACE_PORTS = 1
H:\Assignment3\a3\a3part-B\a3part-B\lcd.asm(181): LCD_INTERFACE_PORTS not set, using default values.
                                 .message "LCD_INTERFACE_PORTS not set, using default values."
                                 
                                 .equ	LCD_PORT_D4  =  PORTG
                                 .equ	LCD_PORT_D5  =	PORTE
                                 .equ	LCD_PORT_D6  =	PORTH
                                 .equ	LCD_PORT_D7  =	PORTH
                                 
                                 .equ	PIN_D4	  =		5
                                 .equ	PIN_D5	  =		3
                                 .equ	PIN_D6	  =		3
                                 .equ	PIN_D7	  =		4
                                 
                                 .equ	LCD_PORT_ENA =	PORTH
                                 .equ 	LCD_PORT_RS  =	PORTH
                                 
                                 .equ	PIN_ENA	  =		6
                                 .equ	PIN_RS	  =		5
                                 .endif
                                 
                                 ; ***
                                 ; End of LCD Pin Definitions
                                 
                                 
                                 ; ***
                                 ; Include LCD Driver Constants and Conditionals.
                                 .include "LCDdefs.inc"
                                 
                                 ; HD44780 LCD Driver for ATmega2560.
                                 ; (DFRobot LCD Keypad Shield v1.1, Arduino Mega2560)
                                 ;
                                 ; Title: 		LCDdefs.inc
                                 ; Description: 	Conditional Assembly, Constant Definitions
                                 ; Author: 		Keegan van der Laag (jkvander@uvic.ca)
                                 ; Updated:		23 February 2015
                                 
                                 ; ---
                                 ;
                                 ; Some code shamelessly adapted from the C implementation of an HD44780
                                 ; driver by Peter Dannegger, posted to the AVR Freaks forum. The original
                                 ; driver is available here:
                                 ;
                                 ; http://www.avrfreaks.net/forum/tutc-lcd-tutorial-1001?name=PNphpBB2&file=viewtopic&t=102296
                                 
                                 
                                 ; Throws a warning if LCD_LIBONLY is not set before the #include in the program
                                 ; using the driver. If LCD_LIBONLY is not set, the default program code for setup,
                                 ; initialization, and main program loop will be assembled.
                                 #ifndef LCD_LIBONLY
                                 #message "LCD Driver loaded, LCD_LIBONLY not set. Running default program code."
                                 #endif
                                 
                                 ; Delay times for LCD commands. These are fairly conservative, but may need to be
                                 ; adjusted for cheap HD44780 compatible controllers, or if you're implementing
                                 ; this driver in antarctica. When in doubt, refer to the data sheet for your LCD
                                 ; module.
                                 .equ LCD_DAT		=	50		; Execute time in microseconds for data commands
                                 .equ LCD_ENA		=	1		; Execute time in microseconds for clock pulse
                                 .equ LCD_CLEAR		=	2		; Execute time for longer commands in ms
                                 
                                 
                                 ; Set the bit-width of the stack pointer for your processor.
                                 ; This determines how many bytes some subroutines will pop off the stack
                                 ; to preserve return addresses.
                                 ; You know, I don't actually know if other MCUs have wider SP registers.
                                 ; This kind of just assumes that they don't. I guess we'll find out pretty
                                 ; quick.
                                 .if 	RAMEND <	0x100
                                 .else
                                 .equ 	SP_OFFSET = 3
                                 .endif
                                 
                                 
                                 ; ***
                                 ; Register definitions used in this module.
                                 
                                 .def CREG	=	R18					; Command or data register used in routines
                                 .def DREG	=	R19					; Delay values passed to dly_ms and dly_us
                                 .def TEMP	=	R16					; Mnemonics for temporary values
                                 .def TEMP2	=	R17
                                 ; ***
                                 ; End of Driver Register Definitions
                                 
                                 
                                 ; ***
                                 ; Exception Handling
                                 ;
                                 ; Handle cases where some things are defined, but not others.
                                 #ifdef LCD_SIZE
                                 	#ifndef LCD_ROW
                                 	#elif (LCD_ROW > 4) | (LCD_ROW < 1) | (LCD_ROW == 3)
                                 	#endif
                                 
                                 	#ifndef LCD_COLUMN
                                 	#elif LCD_ROW == 1
                                 		#if !(LCD_COLUMN == 8 | LCD_COLUMN == 16 | LCD_COLUMN == 20 | LCD_COLUMN == 40)
                                 		#endif
                                 	#elif LCD_ROW == 2
                                 		#if !(LCD_COLUMN == 8 | LCD_COLUMN == 12 | LCD_COLUMN == 16 | LCD_COLUMN == 20 | LCD_COLUMN == 24 | LCD_COLUMN == 40)
                                 		#endif
                                 	#elif LCD_ROW == 4
                                 		#if !(LCD_COLUMN == 16 | LCD_COLUMN == 20)
                                 		#endif
                                 	#endif
                                 #endif
                                 
                                 #ifdef LCD_DISPLAY_SET
                                 	#ifndef LCD_SHOW_CURSOR
                                 	#endif
                                 	#ifndef LCD_BLINK_CURSOR
                                 	#endif
                                 	#ifndef LCD_DISPLAY_ON
                                 	#endif
                                 #endif
                                 
                                 #ifdef LCD_INTERFACE_SET
                                 	#ifndef LCD_INTERFACE_WIDTH
                                 	#endif
                                 	#ifndef LCD_LINE_COUNT
                                 	#endif
                                 	#ifndef LCD_FONT_SIZE
                                 	#endif
                                 #endif
                                 
                                 #ifdef LCD_CURSOR_SET
                                 	#ifndef LCD_CURSOR_DIR
                                 	#endif
                                 	#ifndef LCD_DISPLAY_SHIFT
                                 	#endif
                                 #endif
                                 
                                 #ifdef LCD_SHIFT_SET
                                 	#ifndef LCD_SHIFT_DIR
                                 	#endif
                                 	#ifndef LCD_MOVE_SHIFT
                                 	#endif
                                 #endif
                                 
                                 .ifdef LCD_INTERFACE_PORTS
                                 	.ifndef LCD_PORT_D4
                                 	.elif LCD_PORT_D4 > IOEND
                                 	.endif
                                 	.ifndef LCD_PORT_D5
                                 	.elif LCD_PORT_D5 > IOEND
                                 	.endif
                                 	.ifndef LCD_PORT_D6
                                 	.elif LCD_PORT_D6 > IOEND
                                 	.endif
                                 	.ifndef LCD_PORT_D7
                                 	.elif LCD_PORT_D7 > IOEND
                                 	.endif
                                 	.ifndef LCD_PORT_RS
                                 	.elif LCD_PORT_RS > IOEND
                                 	.endif
                                 	.ifndef LCD_PORT_ENA
                                 	.elif LCD_PORT_ENA > IOEND
                                 	.endif
                                 
                                 	.ifndef PIN_D4
                                 	.elif PIN_D4 > 7
                                 	.endif
                                 	.ifndef PIN_D5
                                 	.elif PIN_D5 > 7
                                 	.endif
                                 	.ifndef PIN_D6
                                 	.elif PIN_D6 > 7
                                 	.endif
                                 	.ifndef PIN_D7
                                 	.elif PIN_D7 > 7
                                 	.endif
                                 	.ifndef PIN_RS
                                 	.elif PIN_RS > 7
                                 	.endif
                                 	.ifndef PIN_ENA
                                 	.elif PIN_ENA > 7
                                 	.endif
                                 
                                 .endif
                                 
                                 
                                 
                                 ; Definitions of constants for different LCD sizes.
                                 #if (LCD_ROW == 1 & LCD_COLUMN == 8)
                                 #endif
                                 
                                 #if (LCD_ROW == 1 & LCD_COLUMN == 16 )
                                 #endif
                                 
                                 #if (LCD_ROW == 1 & LCD_COLUMN == 20 )
                                 #endif
                                 
                                 #if (LCD_ROW == 1 & LCD_COLUMN == 40 )
                                 #endif
                                 
                                 #if (LCD_ROW == 2 & LCD_COLUMN == 8 )
                                 #endif
                                 
                                 #if (LCD_ROW == 2 & LCD_COLUMN == 12 )
                                 #endif
                                 
                                 #if (LCD_ROW == 2 & LCD_COLUMN == 16 )
                                 #define LCD_LINE1       0x80
                                 #define LCD_LINE2       (0x80 + 0x40)
                                 #endif
                                 
                                 #if (LCD_ROW == 2 & LCD_COLUMN == 20 )
                                 #endif
                                 
                                 #if (LCD_ROW == 2 & LCD_COLUMN == 24 )
                                 #endif
                                 
                                 #if (LCD_ROW == 2 & LCD_COLUMN == 40 )
                                 #endif
                                 
                                 #if (LCD_ROW == 4 & LCD_COLUMN == 16 )
                                 #endif
                                 
                                 #if (LCD_ROW == 4 & LCD_COLUMN == 20 )
                                 #endif
                                 
                                 ; Maximum length of a null-terminated string that fills the LCD completely.
                                 ; (Good for reserving memory for the LCD contents.)
                                 #define lcd_length      (LCD_ROW * LCD_COLUMN) + 1
                                 
                                 ; Some constant definitions for Hitachi HD44780 Command instructions.
                                 ; Can be used with lcd_cmd by pushing them onto the stack before calling.
                                 ; For more details about the HD44780 instruction set and instruction format,
                                 ; see the data sheet for the HD44780 from Hitachi.
                                 #define LCD_CMD_CLR			0x01
                                 #define LCD_CMD_HOM			0x02
                                 #define LCD_CMD_EMS     	0x04
                                 #define LCD_CMD_DSP     	0x08
                                 #define LCD_CMD_SHF     	0x10
                                 #define LCD_CMD_FNC     	0x20
                                 #define LCD_CMD_CGR     	0x40
                                 #define LCD_CMD_DDR     	0x80
                                 #define LCD_CMD_INI     	LCD_CMD_FNC + 0x10
                                 
                                 ; Definitions of commands specific to display settings from driver.
                                 ; These are used primarily in lcd_init
                                 #define LCD_CMD_FUNCTION_SET	LCD_CMD_FNC + (LCD_INTERFACE_WIDTH<<4) + (LCD_LINE_COUNT<<3) + (LCD_FONT_SIZE<<2)
                                 #define LCD_CMD_DISPLAY_MODE  LCD_CMD_DSP + (LCD_DISPLAY_ON<<2) + (LCD_SHOW_CURSOR<<1) + LCD_BLINK_CURSOR
                                 #define LCD_CMD_ENTRY_MODE    LCD_CMD_EMS + (LCD_CURSOR_DIR<<1) + (LCD_DISPLAY_SHIFT)
                                 #define LCD_CMD_SHIFT_DISPLAY LCD_CMD_SHF + (LCD_MOVE_SHIFT<<3) + (LCD_SHIFT_DIR)
                                 
                                 
                                 ; ***
                                 ; Port and Pin symbols for LCD_INTERFACE_PORTS. Uses symbols defined in
                                 ; the Atmel partdef file for your MCU.
                                 
                                 ; Port/Pin Labels for D4
                                 .if (LCD_PORT_D4 < 0x100)
                                 	.equ PORT_D4 = (LCD_PORT_D4) + 0x20
                                 	.equ PINS_D4 = (LCD_PORT_D4 - 2) + 0x20
                                 	.equ DDR_D4  = (LCD_PORT_D4 - 1) + 0x20
                                 .else
                                 .endif
                                 
                                 ; Port/Pin Labels for D5
                                 .if (LCD_PORT_D5 < 0x100)
                                 	.equ PORT_D5 = (LCD_PORT_D5) + 0x20
                                 	.equ PINS_D5 = (LCD_PORT_D5 - 2) + 0x20
                                 	.equ DDR_D5  = (LCD_PORT_D5 - 1) + 0x20
                                 .else
                                 .endif
                                 
                                 ; Port/Pin Labels for D6
                                 .if (LCD_PORT_D6 < 0x100)
                                 .else
                                 	.equ PORT_D6 = LCD_PORT_D6
                                 	.equ PINS_D6 = LCD_PORT_D6 - 2
                                 	.equ DDR_D6  = LCD_PORT_D6 - 1
                                 .endif
                                 
                                 ; Port/Pin Labels for D7
                                 .if (LCD_PORT_D7 < 0x100)
                                 .else
                                 	.equ PORT_D7 = LCD_PORT_D7
                                 	.equ PINS_D7 = LCD_PORT_D7 - 2
                                 	.equ DDR_D7  = LCD_PORT_D7 - 1
                                 .endif
                                 
                                 ; Port/Pin Labels for RS
                                 .if (LCD_PORT_RS < 0x100)
                                 .else
                                 	.equ PORT_RS = LCD_PORT_RS
                                 	.equ PINS_RS = LCD_PORT_RS - 2
                                 	.equ DDR_RS  = LCD_PORT_RS - 1
                                 .endif
                                 
                                 ; Port/Pin Labels for ENA
                                 .if (LCD_PORT_ENA < 0x100)
                                 .else
                                 	.equ PORT_ENA = LCD_PORT_ENA
                                 	.equ PINS_ENA = LCD_PORT_ENA - 2
                                 	.equ DDR_ENA  = LCD_PORT_ENA - 1
                                 .endif
                                 ; ***
                                 
                                 
                                 
                                 ; ***
                                 ; Code Segment.
                                 .cseg
                                 
                                 
                                 ; **
                                 ; Default Program Initialization/Setup
                                 ; (Not included if LCD_LIBONLY is defined.)
                                 #ifndef LCD_LIBONLY
000056 940e 013b                 	call lcd_init		; call lcd_init to Initialize the LCD
                                 
000058 e002                      	ldi TEMP, high(str)	; Push the data memory address
000059 930f                      	push TEMP			; of str to the stack
00005a e000                      	ldi TEMP, low(str)
00005b 930f                      	push TEMP
00005c e003                      	ldi TEMP, high(init<<1)	; Push the address of init, shifted for
00005d 930f                      	push TEMP				; program memory access, to the stack
00005e ef0a                      	ldi TEMP, low(init<<1)
00005f 930f                      	push TEMP
000060 940e 01e4                 	call str_init		; Call str_init to initialize data memory address
000062 910f                      	pop TEMP			; str with the contents of program memory segment
000063 910f                      	pop TEMP			; init
000064 910f                      	pop TEMP
000065 910f                      	pop TEMP
                                 
000066 e002                      	ldi TEMP, high(str)
000067 930f                      	push TEMP
000068 e000                      	ldi TEMP, low(str)
000069 930f                      	push TEMP 
00006a 940e 00f1                 	call lcd_puts		; Call lcd_puts to output the initialized string
                                 						; to the LCD. For demonstration purposes only.
                                 						; May be commented without impacting LCD functionality.
00006c 910f                      	pop TEMP
00006d 910f                      	pop TEMP
                                 
                                 #endif
                                 ; **
                                 ; End of Default Program Initialization/Setup
                                 
                                 
                                 ; **
                                 ; Default Main Program Loop
                                 ; (Not included if LCD_LIBONLY is defined.)
                                 #ifndef LCD_LIBONLY
                                 mainloop:
                                 
                                 
00006e 940c 006e                 	jmp mainloop
                                 #endif
                                 ; **
                                 ; End of Main Program Loop
                                 
                                 
                                 
                                 #ifndef LCD_LIBONLY
000070 940c 0070                 subroutinedefinitions: jmp subroutinedefinitions 	; Just in case.
                                 #else
                                 #endif
                                 
                                 ; *** ***
                                 ; LCD Controller Subroutine Definitions
                                 ;
                                 ; * LCD Subroutines    *
                                 ; lcd_nbl     - 	Take byte from stack. Send high nibble to LCD. Return byte.
                                 ; lcd_byte    - 	Take byte from stack. Push to lcd_nbl. Swap nibbles of byte, push to stack.
                                 ;					call lcd_nbl
                                 ; lcd_cmd     - 	Take byte from stack. Set RS pin to 0 (command). Push byte to LCD
                                 ;					through lcd_byte.
                                 ; lcd_putchar - 	Take byte from stack. Set RS to 1 (write). Push byte to lcd_byte.
                                 ;					Increment cursor_xy.
                                 ; lcd_puts    - 	Take two-byte address of string from stack. Set X pointer to address.
                                 ;					Push (X) to stack. Call lcd_putchar.
                                 ; lcd_gotoxy  -		Take byte from stack. Byte takes form YYYYXXXX. Update cursor_xy to byte.
                                 ;					High nibble is row value, low nibble is column. Use LCD definitions to calculate
                                 ;					memory address for location on display. Push address to stack. Call lcd_cmd.
                                 ;					Update cursor_xy to byte.
                                 ; lcd_clr     -		Push LCD_CMD_CLR to the stack, call lcd_cmd. Clears display, returns cursor to 0,0
                                 ;
                                 ;
                                 ; * Delay Subroutines  *
                                 ; dly_us      -		Busy-wait delay loop for ~(DREG) microseconds. (0 <= (DREG) <= 255)
                                 ; dly_ms      -		Busy-wait delay loop for ~(DREG) milliseconds (0 <= (DREG) <= 15)
                                 ;
                                 ;	Both delay subroutines currently assume a CPU frequency of 16 MHz.
                                 ;
                                 ;
                                 ; * String Subroutines *
                                 ; str_init	  -		Take two-byte pointer for string constant location in program memory, take
                                 ;					two-byte pointer for target location in data memory. Copy each byte from
                                 ;					program memory to data memory until a null character is found.
                                 
                                 ; *            		  *
                                 
                                 
                                 
                                 
                                 ; **
                                 ; lcd_nbl : 		Send high nibble of CREG to LCD. Pulses clock.
                                 ;
                                 ; Registers:	CREG	-	Data byte of which to send high nibble to LCD.
                                 ;				TEMP	-	Temporary working register
                                 ;				DREG    -	Passed to dly_us.
                                 ; Memory:		None.
                                 ; Stack:		None.
                                 ; Returns:		Nothing.
                                 ;
                                 lcd_nbl:
000072 930f                      	push TEMP
000073 932f                      	push CREG
000074 933f                      	push DREG
                                 
000075 9100 0032                 	lds TEMP, PINS_D4
000077 7d0f                      	cbr TEMP, (1<<PIN_D4)
000078 fd24                      	sbrc CREG, 4
000079 6200                      	sbr TEMP, (1<<PIN_D4)
00007a 9300 0034                 	sts PORT_D4, TEMP
                                 
00007c 9100 002c                 	lds TEMP, PINS_D5
00007e 7f07                      	cbr TEMP, (1<<PIN_D5)
00007f fd25                      	sbrc CREG, 5
000080 6008                      	sbr TEMP, (1<<PIN_D5)
000081 9300 002e                 	sts PORT_D5, TEMP
                                 
000083 9100 0100                 	lds TEMP, PINS_D6
000085 7f07                      	cbr TEMP, (1<<PIN_D6)
000086 fd26                      	sbrc CREG, 6
000087 6008                      	sbr TEMP, (1<<PIN_D6)
000088 9300 0102                 	sts PORT_D6, TEMP
                                 
00008a 9100 0100                 	lds TEMP, PINS_D7
00008c 7e0f                      	cbr TEMP, (1<<PIN_D7)
00008d fd27                      	sbrc CREG, 7
00008e 6100                      	sbr TEMP, (1<<PIN_D7)
00008f 9300 0102                 	sts PORT_D7, TEMP
                                 
                                 	; Pulse clock high
000091 9100 0100                 	lds TEMP, PINS_ENA
000093 6400                      	sbr TEMP, (1<<PIN_ENA)
000094 9300 0102                 	sts PORT_ENA, TEMP
                                 
                                 	; Wait for LCD_ENA microseconds
000096 e031                      	ldi DREG, LCD_ENA
000097 940e 01c0                 	call dly_us
                                 
                                 	; Pulse clock low.
000099 9100 0100                 	lds TEMP, PINS_ENA
00009b 7b0f                      	cbr TEMP,  (1<<PIN_ENA)
00009c 9300 0102                 	sts PORT_ENA, TEMP
                                 
                                 	; Return
00009e 913f                      	pop DREG
00009f 912f                      	pop CREG
0000a0 910f                      	pop TEMP
0000a1 9508                      	ret
                                 ; **
                                 ; End of lcd_nbl
                                 
                                 
                                 ; **
                                 ; lcd_byte :   	 	Send eight bits of (dat) to LCD. Calls lcd_nbl.
                                 ;
                                 ; Registers:	CREG	-	Working register. Command data.
                                 ;				DREG	-	Passed to dly_us.
                                 ;				TEMP	-	Temporary working register.
                                 ; Stack:		Input	-	1 byte
                                 ;					1	-	Data byte to send to LCD.
                                 ; Returns:		CREG	-	1 byte returned to stack, data byte sent.
                                 ;							Used for checking command at end of things
                                 ;							like lcd_cmd.
                                 lcd_byte:
                                 	.set PARAM_OFFSET = 5
                                 	; Get stack data into CREG
0000a2 932f                      	push CREG
0000a3 933f                      	push DREG
0000a4 930f                      	push TEMP
0000a5 93df                      	push YH
0000a6 93cf                      	push YL
                                 
0000a7 b7de                      	in YH, SPH
0000a8 b7cd                      	in YL, SPL
                                 
0000a9 8529                      	ldd CREG, Y+1+(SP_OFFSET+PARAM_OFFSET)
                                 
                                 	; Send high nibble
0000aa 940e 0072                 	call lcd_nbl
                                 	; Wait LCD_DAT microseconds for command to finish.
                                 
0000ac e332                      	ldi DREG, LCD_DAT
0000ad 940e 01c0                 	call dly_us
                                 	; Send low nibble of CREG
0000af 9522                      	swap CREG
0000b0 940e 0072                 	call lcd_nbl
                                 	; Wait LCD_DAT microseconds for command to finish,
0000b2 e332                      	ldi DREG, LCD_DAT
0000b3 940e 01c0                 	call dly_us
                                 	
0000b5 91cf                      	pop YL
0000b6 91df                      	pop YH
0000b7 910f                      	pop TEMP
0000b8 913f                      	pop DREG
0000b9 912f                      	pop CREG
0000ba 9508                      	ret
                                 ; **
                                 ; End of lcd_byte
                                 
                                 
                                 ; **
                                 ; lcd_cmd :			Set RS pin on LCD to 0 (Command.) Pop command data byte from
                                 ;					stack. Send to LCD using lcd_byte.
                                 ;
                                 ; Registers:	TEMP	-	Temporary working register.
                                 ;				DREG	-	Passed to dly_ms.
                                 ;				CREG	-	Working register. Returned from lcd_byte.
                                 ; Stack:		Input	-	1 byte
                                 ;					1:		Command data byte.
                                 ; Returns:		Nothing.
                                 lcd_cmd:
                                 	.set PARAM_OFFSET = 5
0000bb 930f                      	push TEMP
0000bc 933f                      	push DREG
0000bd 932f                      	push CREG
0000be 93df                      	push YH
0000bf 93cf                      	push YL
0000c0 b7de                      	in YH, SPH
0000c1 b7cd                      	in YL, SPL
                                 
0000c2 8529                      	ldd CREG, Y+1+(SP_OFFSET+PARAM_OFFSET)
                                 
                                 
                                 	; Set RS = 0
0000c3 9100 0100                 	lds TEMP, PINS_RS
0000c5 7d0f                      	cbr TEMP, (1<<PIN_RS)
0000c6 9300 0102                 	sts PORT_RS, TEMP
                                 	; Send commnand byte (dat)
0000c8 932f                      	push CREG
0000c9 940e 00a2                 	call lcd_byte
0000cb 912f                      	pop CREG
                                 
                                 	; On CREG = 0x01, 0x02, or 0x03, command takes longer to execute.
                                 	; Wait LCD_CLEAR milliseconds before continuing.
                                 
0000cc 3024                      	cpi CREG, 0x04
0000cd f418                      	brsh cmd_fin
0000ce e032                      	ldi DREG, LCD_CLEAR
0000cf 940e 01ca                 	call dly_ms
                                 
                                 cmd_fin:
0000d1 91cf                      	pop YL
0000d2 91df                      	pop YH
0000d3 912f                      	pop CREG
0000d4 913f                      	pop DREG
0000d5 910f                      	pop TEMP
                                 
0000d6 9508                      	ret
                                 ; **
                                 ; End of lcd_cmd
                                 
                                 
                                 ; **
                                 ; lcd_putchar : 	Set RS pin on LCD to 1 (write data). Send character in
                                 ;					byte from stack.
                                 ;					...just saying, this command auto-increments the DDRAM
                                 ;					address of the LCD. You'll probably want to update your
                                 ;					cursor position accordingly.
                                 ;
                                 ; Registers:	TEMP		-	Temporary value. MODIFIED.
                                 ;				CREG		-	Stack input, character to write
                                 ; Memory:		Nothing.		
                                 ; Stack:		Input		-	1 byte. Character data.
                                 ;					SP+1	-	Character to write
                                 ; Returns:		Nothing.							
                                 lcd_putchar:
                                 	.set PARAM_OFFSET = 4
0000d7 930f                      	push TEMP
0000d8 932f                      	push CREG
0000d9 93df                      	push YH
0000da 93cf                      	push YL
                                 
0000db b7de                      	in YH, SPH
0000dc b7cd                      	in YL, SPL
                                 
0000dd 8528                      	ldd CREG, Y+1+(SP_OFFSET+PARAM_OFFSET)
                                 
                                 	; Set RS = 1 (Write data to current DDRAM address)
0000de 9100 0100                 	lds TEMP, PINS_RS
0000e0 6200                      	sbr TEMP, (1<<PIN_RS)
0000e1 9300 0102                 	sts PORT_RS, TEMP
                                 	; Send character data in byte (dat) using lcd_byte
0000e3 932f                      	push CREG
0000e4 940e 00a2                 	call lcd_byte
0000e6 912f                      	pop CREG
                                 
                                 	; Increment cursor column. Note that this does not
                                 	; perform any sort of checking for whether or not
                                 	; the column number exceeds the number of columns
                                 	; that the LCD can display, nor does it automatically
                                 	; adjust the cursor_row position accordingly.
0000e7 9100 0222                 	lds TEMP, cursor_col
0000e9 9503                      	inc TEMP
0000ea 9300 0222                 	sts cursor_col, TEMP
                                 
0000ec 91cf                      	pop YL
0000ed 91df                      	pop YH
0000ee 912f                      	pop CREG
0000ef 910f                      	pop TEMP
0000f0 9508                      	ret
                                 ; 
                                 ; **
                                 ; End of lcd_putchar
                                 
                                 
                                 ; **
                                 ; lcd_puts:			Takes a two-byte address pointer to the start of a
                                 ;					string, outputs it serially to the LCD using
                                 ;					lcd_putchar. Stops when a null character is found
                                 ;					in memory.
                                 ;					Conceivably, you could add code to the end of parse
                                 ;					to check cursor position validity for the given LCD
                                 ;					size. This could also be done in lcd_putchar.
                                 ; Registers:		ZH:ZL	-	Address pointer to beginning of string.
                                 ;					TEMP	-	Temporary working register
                                 ;					TEMP2	-	Temporary working register
                                 ; Stack:			Input	-	Two-byte address pointer to string.
                                 ;						SP+1	-	Low Byte of Address
                                 ;						SP+2	-	High Byte of Address
                                 ; Returns:			Nothing
                                 lcd_puts:		
                                 	.set PARAM_OFFSET = 6
0000f1 930f                      	push TEMP
0000f2 931f                      	push TEMP2
0000f3 93df                      	push YH
0000f4 93cf                      	push YL
0000f5 93ff                      	push ZH
0000f6 93ef                      	push ZL
                                 	
0000f7 b7de                      	in YH, SPH
0000f8 b7cd                      	in YL, SPL	
                                 		
0000f9 85fb                      		ldd ZH, Y+1+(SP_OFFSET+PARAM_OFFSET)+1
0000fa 85ea                      		ldd ZL, Y+1+(SP_OFFSET+PARAM_OFFSET)
                                 	parse:
0000fb 9111                      		ld TEMP2, Z+
0000fc 3010                      		cpi TEMP2, 0x00
0000fd f029                      		breq donestr
0000fe 931f                      		push TEMP2
0000ff 940e 00d7                 		call lcd_putchar
000101 911f                      		pop TEMP2
000102 cff8                      		rjmp parse
                                 	donestr:
000103 91ef                      		pop ZL
000104 91ff                      		pop ZH
000105 91cf                      		pop YL
000106 91df                      		pop YH
000107 911f                      		pop TEMP2
000108 910f                      		pop TEMP
                                 
000109 9508                      		ret
                                 ; **
                                 ; End of lcd_puts
                                 
                                 
                                 ; **
                                 ; lcd_gotoxy :		Take Row/Column values from stack. Check that input isn't
                                 ;					bogus for the LCD size defined in the header. If row or column
                                 ;					are out of bound, they are set arbitrarily to the highest possible
                                 ;					value for the LCD. Calculates DDRAM address in HD44780 corresponding
                                 ;					to the given (Row,Column) pair for the LCD size defined in the header.
                                 ;					Sends memory address command to LCD using lcd_cmd.
                                 ; Register:		TEMP	-	Temporary working register. Pops Column from stack.
                                 ;				TEMP2	-	Temporary working register. Pops Row from stack.
                                 ; Memory:		cursor_row	-	Current cursor row position. Updated.
                                 ;				cursor_col	-	Current cursor column position. Updated.
                                 ;								Unmodified.
                                 ; Stack:		Input:			2 bytes
                                 ;					SP+1:			Row to jump to. Range: 0 to (LCD_ROW - 1)
                                 ;					SP+2:			Column to jump to. Range: 0 to (LCD_COLUMN - 1)
                                 ; Returns:		Nothing
                                 lcd_gotoxy:
                                 	.set PARAM_OFFSET = 4
00010a 930f                      	push TEMP
00010b 931f                      	push TEMP2
00010c 93df                      	push YH
00010d 93cf                      	push YL
                                 
00010e b7de                      	in YH, SPH
00010f b7cd                      	in YL, SPL
                                 
000110 8508                      	ldd TEMP, Y+1+(SP_OFFSET+PARAM_OFFSET)		; Column
000111 8519                      	ldd TEMP2, Y+1+(SP_OFFSET+PARAM_OFFSET)+1	; Row
                                 
000112 3011                      	cpi TEMP2, (LCD_ROW - 1)
000113 f01c                      	brlt check_col
000114 e011                      	ldi TEMP2, (LCD_ROW - 1)
000115 940c 011a                 	jmp gotoxy_assign
                                 check_col:
000117 300f                      	cpi	TEMP, (LCD_COLUMN - 1)
000118 f00c                      	brlt gotoxy_assign
000119 e00f                      	ldi TEMP, (LCD_COLUMN - 1)
                                 gotoxy_assign:
00011a 9310 0221                 	sts cursor_row, TEMP2
00011c 9300 0222                 	sts cursor_col, TEMP
                                 
                                 	#ifdef LCD_LINE4
                                 	#endif
                                 	#ifdef LCD_LINE3
                                 	#endif
                                 	#ifdef LCD_LINE2
                                 ln2:
00011e 3011                      	cpi TEMP2, 1
00011f f419                      	brne ln1
000120 ec10                      	ldi TEMP2, LCD_LINE2
000121 940c 0124                 	jmp addcol
                                 	#endif
                                 ln1:
000123 e810                      	ldi TEMP2, LCD_LINE1
                                 
                                 addcol:
000124 0f01                      	add TEMP, TEMP2
                                 
                                 	; Memory address is command data. Send using lcd_cmd
000125 930f                      	push TEMP
000126 940e 00bb                 	call lcd_cmd
000128 910f                      	pop TEMP
                                 
000129 91cf                      	pop YL
00012a 91df                      	pop YH
00012b 911f                      	pop TEMP2
00012c 910f                      	pop TEMP
00012d 9508                      	ret
                                 ; **
                                 ; End of lcd_gotoxy
                                 
                                 
                                 ; **
                                 ; lcd_clr : 		Clear the LCD, return cursor to (0,0)
                                 ; Registers :	TEMP	-	Temporary working register.
                                 ; Memory :		cursor_row	-	Current cursor row. Updated.
                                 ;				cursor_col 	-	Current cursor column. Updated.
                                 ; Stack:		None.
                                 ; Returns:		None.
                                 lcd_clr:
00012e 930f                      	push TEMP
                                 
00012f e001                      	ldi TEMP, LCD_CMD_CLR
000130 930f                      	push TEMP
000131 940e 00bb                 	call lcd_cmd
000133 910f                      	pop TEMP
                                 
                                 	; Update cursor position,
000134 2700                      	clr TEMP
000135 9300 0221                 	sts cursor_row, TEMP
000137 9300 0222                 	sts cursor_col, TEMP
                                 
000139 910f                      	pop TEMP
00013a 9508                      	ret
                                 ; **
                                 ; End lcd_clr
                                 
                                 
                                 ; **
                                 ; lcd_init: 	Initialize the LCD based on the specifications for
                                 ;				initialization by command in the Hitachi HD44780
                                 ;				data sheet.
                                 ; Registers:	Most of TEMP, TEMP2, DREG, CREG, RET1-RET3, at
                                 ;				some point.
                                 ; Memory:		Lots of I/O space read/write.
                                 ; Stack:		None
                                 ; Returns:		Nothing.
                                 lcd_init:
00013b 930f                      	push TEMP
00013c 932f                      	push CREG
00013d 933f                      	push DREG
                                 
                                 	; Set Data Direction Register bits to output for LCD data 4-7,
                                 	; E, and RS.
00013e 9100 0033                 	lds TEMP, DDR_D4
000140 6200                      	sbr TEMP, (1<<PIN_D4)
000141 9300 0033                 	sts DDR_D4, TEMP
000143 9100 0032                 	lds TEMP, PINS_D4
000145 7d0f                      	cbr TEMP, (1<<PIN_D4)
000146 9300 0034                 	sts PORT_D4, TEMP
                                 
000148 9100 002d                 	lds TEMP, DDR_D5
00014a 6008                      	sbr TEMP, (1<<PIN_D5)
00014b 9300 002d                 	sts DDR_D5, TEMP
00014d 9100 002c                 	lds TEMP, PINS_D5
00014f 7f07                      	cbr TEMP, (1<<PIN_D5)
000150 9300 002e                 	sts PORT_D5, TEMP
                                 
000152 9100 0101                 	lds TEMP, DDR_D6
000154 6008                      	sbr TEMP, (1<<PIN_D6)
000155 9300 0101                 	sts DDR_D6, TEMP
000157 9100 0100                 	lds TEMP, PINS_D6
000159 7f07                      	cbr TEMP, (1<<PIN_D6)
00015a 9300 0102                 	sts PORT_D6, TEMP
                                 
00015c 9100 0101                 	lds TEMP, DDR_D7
00015e 6100                      	sbr TEMP, (1<<PIN_D7)
00015f 9300 0101                 	sts DDR_D7, TEMP
000161 9100 0100                 	lds TEMP, PINS_D7
000163 7e0f                      	cbr TEMP, (1<<PIN_D7)
000164 9300 0102                 	sts PORT_D7, TEMP
                                 
000166 9100 0101                 	lds TEMP, DDR_RS
000168 6200                      	sbr TEMP, (1<<PIN_RS)
000169 9300 0101                 	sts DDR_RS, TEMP
00016b 9100 0100                 	lds TEMP, PINS_RS
00016d 7d0f                      	cbr TEMP, (1<<PIN_RS)
00016e 9300 0102                 	sts PORT_RS, TEMP
                                 
000170 9100 0101                 	lds TEMP, DDR_ENA
000172 6400                      	sbr TEMP, (1<<PIN_ENA)
000173 9300 0101                 	sts DDR_ENA, TEMP
000175 9100 0100                 	lds TEMP, PINS_ENA
000177 7b0f                      	cbr TEMP, (1<<PIN_ENA)
000178 9300 0102                 	sts PORT_ENA, TEMP
                                 
                                 	; Initialize display to specs listed in HD44780 data sheet.
                                 	; Generally very conservative with timing; speed may be improved
                                 	; with some experimentation.
                                 
00017a e03f                      	ldi DREG, 0xF	; wait >= 15ms to power up. (Conservatively.)
00017b 940e 01ca                 	call dly_ms
00017d e035                      	ldi DREG, 0x5
00017e 940e 01ca                 	call dly_ms
                                 
000180 e320                      	ldi CREG, LCD_CMD_INI ; send the first half of 0x30 (8-bit mode) three times
000181 940e 0072                 	call lcd_nbl
000183 e035                      	ldi DREG, 0x5	; wait 5ms before sending the second set command
000184 940e 01ca                 	call dly_ms
000186 e320                      	ldi CREG, LCD_CMD_INI
000187 940e 0072                 	call lcd_nbl
000189 e057                      	ldi R21, 0x7	; wait 15ms (max for dly_ms) 7 times is ~100ms
                                 dly_init:
00018a e03f                      	ldi DREG, 0xF	; wait 100ms before sending the last one
00018b 940e 01ca                 	call dly_ms
00018d 955a                      	dec R21  		; dec temp counter (not used in dly_ms)
00018e f7d9                      	brne dly_init	; if 0, send the nibble again
00018f e320                          ldi CREG, LCD_CMD_INI
000190 940e 0072                 	call lcd_nbl
000192 e332                      	ldi DREG, LCD_DAT	; wait LCD_DATus before sending more commands
000193 940e 01c0                 	call dly_us
000195 e220                      	ldi CREG, LCD_CMD_FNC	; load 4-bit mode command into CREG
000196 940e 0072                 	call lcd_nbl
000198 e332                      	ldi DREG, LCD_DAT
000199 940e 01c0                 	call dly_us
00019b e208                      	ldi TEMP, LCD_CMD_FUNCTION_SET		; 4-bit, 2-line, 5x8 dot
                                 
00019c 930f                      	push TEMP
00019d 940e 00bb                 	call lcd_cmd
00019f 910f                      	pop TEMP
                                 
0001a0 e008                      	ldi TEMP, LCD_CMD_DSP		; Display Off, Cursor Off, Blink Off
                                 
0001a1 930f                      	push TEMP
0001a2 940e 00bb                 	call lcd_cmd
0001a4 910f                      	pop TEMP
                                 
0001a5 e001                      	ldi TEMP, LCD_CMD_CLR	; Display Clear
                                 
0001a6 930f                      	push TEMP
0001a7 940e 00bb                 	call lcd_cmd
0001a9 910f                      	pop TEMP
                                 
0001aa e032                      	ldi DREG, LCD_CMD_HOM
0001ab 940e 01ca                 	call dly_ms
0001ad e006                      	ldi TEMP, LCD_CMD_ENTRY_MODE		; Increment cursor, no Display Shift
                                 
0001ae 930f                      	push TEMP
0001af 940e 00bb                 	call lcd_cmd
0001b1 910f                      	pop TEMP
                                 
0001b2 e00c                      	ldi TEMP, LCD_CMD_DISPLAY_MODE		; Display On, Cursor On, Blink On
                                 
0001b3 930f                      	push TEMP
0001b4 940e 00bb                 	call lcd_cmd
0001b6 910f                      	pop TEMP
                                 
0001b7 2700                      	clr TEMP
0001b8 9300 0221                 	sts cursor_row, TEMP ; Update cursor position to (0,0)
0001ba 9300 0222                 	sts cursor_col, TEMP
                                 
0001bc 913f                      	pop DREG
0001bd 912f                      	pop CREG
0001be 910f                      	pop TEMP
                                 
0001bf 9508                      	ret
                                 ; **
                                 
                                 
                                 ; **
                                 ; dly_us : 			Busy-Wait loop for about DREG microseconds.
                                 ;					(0 < DREG <= 255)
                                 ;					Regrettably assumes a CPU speed of 16 MHz.
                                 ;					This should be abstracted to use the symbol
                                 ;					FCPU to calculate a 1us loop for the CPU
                                 ;					speed of the given processor.
                                 ;
                                 ; Registers:	DREG	-	Input. Used as counter. MODIFIED.
                                 ;				TEMP	-	Counter. MODIFIED.
                                 ; Memory:		Nope.
                                 ; Stack:		Nah.
                                 ; Returns:		Nothing.
                                 dly_us:
0001c0 930f                      	push TEMP
0001c1 933f                      	push DREG
                                 
0001c2 e005                      dlyus_dreg:	ldi TEMP, 0x05
0001c3 950a                      dlyus_in:	dec TEMP
0001c4 f7f1                      			brne dlyus_in
0001c5 953a                      			dec DREG
0001c6 f7d9                      			brne dlyus_dreg
                                 
0001c7 913f                      	pop DREG
0001c8 910f                      	pop TEMP
                                 
0001c9 9508                      	ret
                                 ; **
                                 ; End of dly_us
                                 
                                 
                                 ; **
                                 ; dly_ms:			Busy-wait loop for about DREG milliseconds.
                                 ;					Hackily adapted from the delay_ms function
                                 ;					in the AVR C libraries. Regrettably assumes a
                                 ;					CPU speed of 16 MHz.
                                 ;
                                 ; Registers : 	DREG	-	Input. Number of ms to wait. MODIFIED.
                                 ;				YH:YL	-	16-bit counter. MODIFIED.
                                 ;				TEMP	-	Temporary value. MODIFIED.
                                 ; Memory:		None.
                                 ; Stack:		None.
                                 ; Returns:		Nothing.
                                 dly_ms:
0001ca 930f                      	push TEMP
0001cb 931f                      	push TEMP2
0001cc 933f                      	push DREG
0001cd 93df                      	push YH
0001ce 93cf                      	push YL
                                 
                                 		; 1ms = FCPU / 1000 instructions
                                 		; This loop is 4 instructions per iteration.
                                 		;
0001cf ef0d                      		ldi TEMP, 0xFD
0001d0 9f30                      		mul DREG, TEMP
0001d1 2d01                      		mov TEMP, R1
0001d2 9502                      		swap TEMP
0001d3 7f00                      		andi TEMP, 0xF0
0001d4 2fd0                      		mov YH, TEMP
0001d5 2d00                      		mov TEMP, R0
0001d6 9502                      		swap TEMP
0001d7 2f10                      		mov TEMP2, TEMP
0001d8 7f00                      		andi TEMP, 0xF0
0001d9 701f                      		andi TEMP2, 0x0F
0001da 2fc0                      		mov YL, TEMP
0001db 2bd1                      		or YH, TEMP2
                                 
                                 
0001dc 9721                      dlyms:	sbiw YH:YL, 1
0001dd f7f1                      		brne dlyms
                                 
0001de 91cf                      	pop YL
0001df 91df                      	pop YH
0001e0 913f                      	pop DREG
0001e1 911f                      	pop TEMP2
0001e2 910f                      	pop TEMP
0001e3 9508                      	ret
                                 ; **
                                 ; End dlyms
                                 
                                 
                                 ; **
                                 ; str_init:		Takes a pointer to an initialized constant in program memory,
                                 ;				and a pointer to a location in data memory. Iterates over the
                                 ;				segment of program memory and loads each byte into the corresponding
                                 ;				byte of data memory until a null character is found. You should probably
                                 ;				make sure of two things:
                                 ;					1) That the string in program memory is explicitly null terminated,
                                 ;					   otherwise you can have fun with data memory full of instructions.
                                 ;					2) That you've reserved enough memory in data space to fit the string
                                 ;					   you initialized in program memory, otherwise you're going to have a
                                 ;					   super-great time trying to figure out why your string keeps getting
                                 ;					   mangled.
                                 ;				This subroutine does automatically toss a null character on the end of the
                                 ;				string being initialized.
                                 str_init:
                                 	.set PARAM_OFFSET = 7
0001e4 930f                      	push TEMP
0001e5 93ff                      	push ZH
0001e6 93ef                      	push ZL
0001e7 93bf                      	push XH
0001e8 93af                      	push XL
0001e9 93df                      	push YH
0001ea 93cf                      	push YL
0001eb b7de                      	in YH, SPH
0001ec b7cd                      	in YL, SPL
                                 
0001ed 85eb                      	ldd ZL, Y+1+(SP_OFFSET+7)
0001ee 85fc                      	ldd ZH, Y+1+(SP_OFFSET+7)+1
                                 
0001ef 85ad                      	ldd XL, Y+1+(SP_OFFSET+7)+2
0001f0 85be                      	ldd XH, Y+1+(SP_OFFSET+7)+3
                                 
                                 initloop:
0001f1 9105                      	lpm TEMP, Z+
0001f2 3000                      	cpi TEMP, 0x00
0001f3 930d                      	st X+, TEMP
0001f4 f7e1                      	brne initloop
                                 
0001f5 91cf                      	pop YL
0001f6 91df                      	pop YH
0001f7 91af                      	pop XL
0001f8 91bf                      	pop XH
0001f9 91ef                      	pop ZL
0001fa 91ff                      	pop ZH
0001fb 910f                      	pop TEMP
                                 
0001fc 9508                      	ret
                                 ; **
                                 ; End of str_init
                                 
                                 
                                 
                                 ; *** ***
                                 ; End of Subroutine Definitions
                                 
                                 
                                 ; ***
                                 ; Program Memory Allocation
                                 
                                 ; Initialization value for default string. (Not included if LCD_LIBONLY defined.)
                                 #ifndef LCD_LIBONLY
0001fd 6548
0001fe 6c6c
0001ff 2c6f
000200 5720
000201 726f
000202 646c
000203 0021                      init:	.db		"Hello, World!", '\0'
                                 #endif
                                 
                                 ; ***
                                 ; End of Program Memory Allocation
                                 
                                 #ifdef LCD_LIBONLY
                                 #endif
                                 
                                 ; ***
                                 ; Data Memory Allocation
                                 
                                 .dseg
                                 
                                 	; Data memory reserved for default string. (Not allocated if LCD_LIBONLY defined.)
                                 	#ifndef LCD_LIBONLY
000200                           	str: .byte lcd_length ;
                                 	#endif
                                 
                                 	; Data memory allocated for current LCD cursor position.
000221                           	cursor_row:	.byte 1 
000222                           	cursor_col:	.byte 1	
                                 
                                 ; ***
                                 ; End of Data Memory Allocation
                                 
                                 .cseg
                                 #define CLOCK 16.0e6
                                 #define DELAY1 0.01
                                 #define DELAY3 0.1
                                 #define DELAY4 0.5
                                 
                                 #define BUTTON_RIGHT_MASK 0b00000001	
                                 #define BUTTON_UP_MASK    0b00000010
                                 #define BUTTON_DOWN_MASK  0b00000100
                                 #define BUTTON_LEFT_MASK  0b00001000
                                 
                                 #define BUTTON_RIGHT_ADC  0x032
                                 #define BUTTON_UP_ADC     0x0b0   ; was 0x0c3
                                 #define BUTTON_DOWN_ADC   0x160   ; was 0x17c
                                 #define BUTTON_LEFT_ADC   0x22b
                                 #define BUTTON_SELECT_ADC 0x316
                                 
                                 .equ PRESCALE_DIV=1024   ; w.r.t. clock, CS[2:0] = 0b101
                                 
                                 ; TIMER1 is a 16-bit timer. If the Output Compare value is
                                 ; larger than what can be stored in 16 bits, then either
                                 ; the PRESCALE needs to be larger, or the DELAY has to be
                                 ; shorter, or both.
                                 .equ TOP1=int(0.5+(CLOCK/PRESCALE_DIV*DELAY1))
                                 .if TOP1>65535
                                 .endif
                                 
                                 ; TIMER3 is a 16-bit timer. If the Output Compare value is
                                 ; larger than what can be stored in 16 bits, then either
                                 ; the PRESCALE needs to be larger, or the DELAY has to be
                                 ; shorter, or both.
                                 .equ TOP3=int(0.5+(CLOCK/PRESCALE_DIV*DELAY3))
                                 .if TOP3>65535
                                 .endif
                                 
                                 ; TIMER4 is a 16-bit timer. If the Output Compare value is
                                 ; larger than what can be stored in 16 bits, then either
                                 ; the PRESCALE needs to be larger, or the DELAY has to be
                                 ; shorter, or both.
                                 .equ TOP4=int(0.5+(CLOCK/PRESCALE_DIV*DELAY4))
                                 .if TOP4>65535
                                 .endif
                                 
                                 reset:
                                 ; ***************************************************
                                 ; **** BEGINNING OF FIRST "STUDENT CODE" SECTION ****
                                 ; ***************************************************
                                 
                                 ; Anything that needs initialization before interrupts
                                 ; start must be placed here.
                                 
                                 ; ***************************************************
                                 ; ******* END OF FIRST "STUDENT CODE" SECTION *******
                                 ; ***************************************************
                                 
                                 	.def DATAH=r25      ;DATAH: DATAL  store 10 bits data from ADC
                                 	.def DATAL=r24
                                 	.def BOUNDARY_H_RIGHT=r8  ;hold high byte value of the threshold for button
                                 	.def BOUNDARY_L_RIGHT=r9  ;hold low byte value of threshold for button
                                 	.def BOUNDARY_L_UP = r2
                                 	.def BOUNDARY_H_UP = r3
                                 	.def BOUNDARY_L_DOWN = r4
                                 	.def BOUNDARY_H_DOWN = r5
                                 	.def BOUNDARY_L_LEFT =r6
                                 	.def BOUNDARY_H_LEFT =r7
                                 
                                 	 	 
000204 e302                      	ldi r16, low(int(BUTTON_RIGHT_ADC))
000205 2e90                      	mov BOUNDARY_L_RIGHT, r16
000206 e000                      	ldi r16, high(int(BUTTON_RIGHT_ADC))
000207 2e80                      	mov BOUNDARY_H_RIGHT, r16
                                 
000208 eb00                      	ldi r16, low(int(BUTTON_UP_ADC))
000209 2e20                      	mov BOUNDARY_L_UP, r16
00020a e000                      	ldi r16, high(int(BUTTON_UP_ADC))
00020b 2e30                      	mov BOUNDARY_H_UP, r16
                                 
00020c e600                      	ldi r16, low(int(BUTTON_DOWN_ADC))
00020d 2e40                      	mov BOUNDARY_L_DOWN, r16
00020e e001                      	ldi r16, high(int(BUTTON_DOWN_ADC))
00020f 2e50                      	mov BOUNDARY_H_DOWN, r16
                                 
000210 e20b                      	ldi r16, low(int(BUTTON_LEFT_ADC))
000211 2e60                      	mov BOUNDARY_L_LEFT, r16
000212 e002                      	ldi r16, high(int(BUTTON_LEFT_ADC))
000213 2e70                      	mov BOUNDARY_H_LEFT, r16
                                 
                                 
                                   
000214 df26                      	rcall lcd_init
                                 
                                 ; =============================================
                                 ; ====  START OF "DO NOT TOUCH" SECTION    ====
                                 ; =============================================
                                 
                                 	; initialize the ADC converter (which is needed
                                 	; to read buttons on shield). Note that we'll
                                 	; use the interrupt handler for timer 1 to
                                 	; read the buttons (i.e., every 10 ms)
                                 	;
000215 e807                      	ldi temp, (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0)
000216 9300 007a                 	sts ADCSRA, temp
000218 e400                      	ldi temp, (1 << REFS0)
000219 9300 007c                 	sts ADMUX, r16
                                 
                                 	; Timer 1 is for sampling the buttons at 10 ms intervals.
                                 	; We will use an interrupt handler for this timer.
00021b e010                      	ldi r17, high(TOP1)
00021c e90c                      	ldi r16, low(TOP1)
00021d 9310 0089                 	sts OCR1AH, r17
00021f 9300 0088                 	sts OCR1AL, r16
000221 2700                      	clr r16
000222 9300 0080                 	sts TCCR1A, r16
000224 e00d                      	ldi r16, (1 << WGM12) | (1 << CS12) | (1 << CS10)
000225 9300 0081                 	sts TCCR1B, r16
000227 e002                      	ldi r16, (1 << OCIE1A)
000228 9300 006f                 	sts TIMSK1, r16
                                 
                                 	; Timer 3 is for updating the LCD display. We are
                                 	; *not* able to call LCD routines from within an 
                                 	; interrupt handler, so this timer must be used
                                 	; in a polling loop.
00022a e016                      	ldi r17, high(TOP3)
00022b e10b                      	ldi r16, low(TOP3)
00022c 9310 0099                 	sts OCR3AH, r17
00022e 9300 0098                 	sts OCR3AL, r16
000230 2700                      	clr r16
000231 9300 0090                 	sts TCCR3A, r16
000233 e00d                      	ldi r16, (1 << WGM32) | (1 << CS32) | (1 << CS30)
000234 9300 0091                 	sts TCCR3B, r16
                                 	; Notice that the code for enabling the Timer 3
                                 	; interrupt is missing at this point.
                                 
                                 	; Timer 4 is for updating the contents to be displayed
                                 	; on the top line of the LCD.
000236 e11e                      	ldi r17, high(TOP4)
000237 e805                      	ldi r16, low(TOP4)
000238 9310 00a9                 	sts OCR4AH, r17
00023a 9300 00a8                 	sts OCR4AL, r16
00023c 2700                      	clr r16
00023d 9300 00a0                 	sts TCCR4A, r16
00023f e00d                      	ldi r16, (1 << WGM42) | (1 << CS42) | (1 << CS40)
000240 9300 00a1                 	sts TCCR4B, r16
000242 e002                      	ldi r16, (1 << OCIE4A)
000243 9300 0072                 	sts TIMSK4, r16
                                 
000245 9478                      	sei
                                 
                                 ; =============================================
                                 ; ====    END OF "DO NOT TOUCH" SECTION    ====
                                 ; =============================================
                                 
                                 ; ****************************************************
                                 ; **** BEGINNING OF SECOND "STUDENT CODE" SECTION ****
                                 ; ****************************************************
                                 
                                 start:
                                 check_timer3:           ;OMMITING COMMENTS THAT ARE IN PART A ALREADY
000246 b308                      	in temp, TIFR3
000247 ff01                      	sbrs temp, OCF3A    
000248 cffd                      	rjmp check_timer3   
                                 
000249 e002                      	ldi temp, 1<<OCF3A  ;(LAB 4 COMMENT)
00024a bb08                      	out TIFR3, temp
                                                      
00024b 91a0 0223                 	lds r26, BUTTON_IS_PRESSED   
00024d 30a1                      	cpi r26, 1
00024e f061                      	breq star                    
                                 
                                 	                              
00024f e001                      	ldi r16, 1          
000250 e01f                      	ldi r17, 15         
000251 930f                      	push r16
000252 931f                      	push r17
000253 deb6                      	rcall lcd_gotoxy
000254 911f                      	pop r17
000255 910f                      	pop r16			   
000256 e20d                      	ldi r16, '-'
000257 930f                      	push r16
000258 de7e                      	rcall lcd_putchar
000259 910f                      	pop r16
00025a cfeb                      	rjmp start
                                   star:
00025b e001                      	ldi r16, 1          
00025c e01f                      	ldi r17, 15        
00025d 930f                      	push r16
00025e 931f                      	push r17
00025f deaa                      	rcall lcd_gotoxy
000260 911f                      	pop r17
000261 910f                      	pop r16			   
000262 e20a                      	ldi r16, '*'
000263 930f                      	push r16
000264 de72                      	rcall lcd_putchar
000265 910f                      	pop r16
                                 
                                 letter_display:                    ;goes here after deciding if button is pressed or not
000266 91d0 0224                 	lds r29, LAST_BUTTON_PRESSED   
000268 30d2                      	cpi r29, 2                     ;create my own numbers to define each button
000269 f041                      	breq relativebranchright
00026a 30d3                      	cpi r29, 3
00026b f039                      	breq LEFT
00026c 30d4                      	cpi r29, 4
00026d f0e9                      	breq DOWN
00026e 30d5                      	cpi r29, 5
00026f f199                      	breq UP
000270 940c 0246                 	jmp start
                                 
                                 relativebranchright:                 ;branch was too fat 
000272 c048                      	rjmp RIGHT 
                                 
                                 LEFT:
000273 e001                      	ldi r16, 1          ;add the letter, and spaces in other sports to remove other letters
000274 e010                      	ldi r17, 0         
000275 930f                      	push r16
000276 931f                      	push r17
000277 de92                      	rcall lcd_gotoxy
000278 911f                      	pop r17
000279 910f                      	pop r16		   
00027a e40c                      	ldi r16, 'L'
00027b 930f                      	push r16
00027c de5a                      	rcall lcd_putchar
00027d 910f                      	pop r16
00027e e200                      	ldi r16, ' '
00027f 930f                      	push r16
000280 de56                      	rcall lcd_putchar
000281 910f                      	pop r16
000282 e200                      	ldi r16, ' '
000283 930f                      	push r16
000284 de52                      	rcall lcd_putchar
000285 910f                      	pop r16
000286 e200                      	ldi r16, ' '
000287 930f                      	push r16
000288 de4e                      	rcall lcd_putchar
000289 910f                      	pop r16
00028a cfbb                      	rjmp start
                                 DOWN:
00028b e001                      	ldi r16, 1         
00028c e010                      	ldi r17, 0        
00028d 930f                      	push r16
00028e 931f                      	push r17
00028f de7a                      	rcall lcd_gotoxy
000290 911f                      	pop r17
000291 910f                      	pop r16		   
000292 e200                      	ldi r16, ' '
000293 930f                      	push r16
000294 de42                      	rcall lcd_putchar
000295 910f                      	pop r16
000296 e404                      	ldi r16, 'D'
000297 930f                      	push r16
000298 de3e                      	rcall lcd_putchar
000299 910f                      	pop r16
00029a e200                      	ldi r16, ' '
00029b 930f                      	push r16
00029c de3a                      	rcall lcd_putchar
00029d 910f                      	pop r16
00029e e200                      	ldi r16, ' '
00029f 930f                      	push r16
0002a0 de36                      	rcall lcd_putchar
0002a1 910f                      	pop r16
0002a2 cfa3                      	rjmp start
                                 UP:
0002a3 e001                      	ldi r16, 1         
0002a4 e010                      	ldi r17, 0         
0002a5 930f                      	push r16
0002a6 931f                      	push r17
0002a7 de62                      	rcall lcd_gotoxy
0002a8 911f                      	pop r17
0002a9 910f                      	pop r16		   
0002aa e200                      	ldi r16, ' '
0002ab 930f                      	push r16
0002ac de2a                      	rcall lcd_putchar
0002ad 910f                      	pop r16
0002ae e200                      	ldi r16, ' '
0002af 930f                      	push r16
0002b0 de26                      	rcall lcd_putchar
0002b1 910f                      	pop r16
0002b2 e505                      	ldi r16, 'U'
0002b3 930f                      	push r16
0002b4 de22                      	rcall lcd_putchar
0002b5 910f                      	pop r16
0002b6 e200                      	ldi r16, ' '
0002b7 930f                      	push r16
0002b8 de1e                      	rcall lcd_putchar
0002b9 910f                      	pop r16
0002ba cf8b                      	rjmp start
                                 RIGHT: 
0002bb e001                      	ldi r16, 1         
0002bc e010                      	ldi r17, 0       
0002bd 930f                      	push r16
0002be 931f                      	push r17
0002bf de4a                      	rcall lcd_gotoxy
0002c0 911f                      	pop r17
0002c1 910f                      	pop r16	
0002c2 e200                      	ldi r16, ' '
0002c3 930f                      	push r16
0002c4 de12                      	rcall lcd_putchar
0002c5 910f                      	pop r16	
0002c6 e200                      	ldi r16, ' '
0002c7 930f                      	push r16
0002c8 de0e                      	rcall lcd_putchar
0002c9 910f                      	pop r16
0002ca e200                      	ldi r16, ' '
0002cb 930f                      	push r16
0002cc de0a                      	rcall lcd_putchar
0002cd 910f                      	pop r16
0002ce e502                      	ldi r16, 'R'
0002cf 930f                      	push r16
0002d0 de06                      	rcall lcd_putchar
0002d1 910f                      	pop r16
0002d2 cf73                      	rjmp start
                                 	
                                 timer1:
                                 	
0002d3 9100 007a                 	lds	r16, ADCSRA	
0002d5 6400                      	ori r16, 0x40 
0002d6 9300 007a                 	sts	ADCSRA, r16
                                 	                  ;code from lab 4 
0002d8 9100 007a                 wait:	lds r16, ADCSRA
0002da 7400                      		andi r16, 0x40
0002db f7e1                      		brne wait
                                 
                                 		              ;code from lab 7/4
0002dc 9180 0078                 		lds DATAL, ADCL
0002de 9190 0079                 		lds DATAH, ADCH
0002e0 2777                      		clr r23
                                 
0002e1 1586                      		cp DATAL, BOUNDARY_L_LEFT    ;comparing to each button boundaries 
0002e2 0597                      		cpc DATAH, BOUNDARY_H_LEFT
0002e3 f420                      		brsh not_pressed
                                 		
0002e4 e0b1                      		ldi r27, 1	
0002e5 93b0 0223                 		sts BUTTON_IS_PRESSED, r27
0002e7 c004                      		rjmp button_being_pressed
                                 		
                                 		
                                 		not_pressed:
0002e8 e0b0                      		ldi r27, 0
0002e9 93b0 0223                 		sts BUTTON_IS_PRESSED, r27
0002eb 9518                      		reti
                                 
                                 		button_being_pressed:
                                 
0002ec 1586                      		cp DATAL, BOUNDARY_L_LEFT
0002ed 0597                      		cpc DATAH, BOUNDARY_H_LEFT
0002ee f448                      		brsh left_value
                                 		
                                 
0002ef 1584                      		cp DATAL, BOUNDARY_L_DOWN
0002f0 0595                      		cpc DATAH, BOUNDARY_H_DOWN
0002f1 f450                      		brsh down_value
                                 
0002f2 1582                      		cp DATAL, BOUNDARY_L_UP
0002f3 0593                      		cpc DATAH, BOUNDARY_H_UP
0002f4 f458                      		brsh up_value 
                                 
                                 
0002f5 1589                      		cp DATAL, BOUNDARY_L_RIGHT
0002f6 0598                      		cpc DATAH, BOUNDARY_H_RIGHT
0002f7 f460                      		brsh right_value
                                 
                                 left_value:                     ;depending on which it triggers, send a number to last button pressed.
0002f8 e0c2                      ldi r28, 2	
0002f9 93c0 0224                 sts LAST_BUTTON_PRESSED, r28
0002fb 9518                      reti
                                 
                                 down_value:
0002fc e0c3                      ldi r28, 3	
0002fd 93c0 0224                 sts LAST_BUTTON_PRESSED, r28
0002ff 9518                      reti
                                 
                                 up_value:
000300 e0c4                      ldi r28, 4	
000301 93c0 0224                 sts LAST_BUTTON_PRESSED, r28
000303 9518                      reti
                                 
                                 right_value:
000304 e0c5                      ldi r28, 5	
000305 93c0 0224                 sts LAST_BUTTON_PRESSED, r28
000307 9518                      reti
                                 
                                 
                                 
                                 stop:
000308 cfff                      	rjmp stop
                                 
                                 
                                 
                                 ; timer3:
                                 ;
                                 ; Note: There is no "timer3" interrupt handler as you must use
                                 ; timer3 in a polling style (i.e. it is used to drive the refreshing
                                 ; of the LCD display, but LCD functions cannot be called/used from
                                 ; within an interrupt handler).
                                 
                                 
                                 timer4:
000309 9518                      	reti
                                 
                                 
                                 ; ****************************************************
                                 ; ******* END OF SECOND "STUDENT CODE" SECTION *******
                                 ; ****************************************************
                                 
                                 
                                 ; =============================================
                                 ; ==== BEGINNING OF "DO NOT TOUCH" SECTION ====
                                 ; =============================================
                                 
                                 ; r17:r16 -- word 1
                                 ; r19:r18 -- word 2
                                 ; word 1 < word 2? return -1 in r25
                                 ; word 1 > word 2? return 1 in r25
                                 ; word 1 == word 2? return 0 in r25
                                 ;
                                 compare_words:
                                 	; if high bytes are different, look at lower bytes
00030a 1713                      	cp r17, r19
00030b f029                      	breq compare_words_lower_byte
                                 
                                 	; since high bytes are different, use these to
                                 	; determine result
                                 	;
                                 	; if C is set from previous cp, it means r17 < r19
                                 	; 
                                 	; preload r25 with 1 with the assume r17 > r19
00030c e091                      	ldi r25, 1
00030d f008                      	brcs compare_words_is_less_than
00030e c007                      	rjmp compare_words_exit
                                 
                                 compare_words_is_less_than:
00030f ef9f                      	ldi r25, -1
000310 c005                      	rjmp compare_words_exit
                                 
                                 compare_words_lower_byte:
000311 2799                      	clr r25
000312 1702                      	cp r16, r18
000313 f011                      	breq compare_words_exit
                                 
000314 e091                      	ldi r25, 1
000315 f3c8                      	brcs compare_words_is_less_than  ; re-use what we already wrote...
                                 
                                 compare_words_exit:
000316 9508                      	ret
                                 
                                 .cseg
000317 3130
000318 3332
000319 3534
00031a 3736
00031b 3938
00031c 6261
00031d 6463
00031e 6665
00031f 005f                      AVAILABLE_CHARSET: .db "0123456789abcdef_", 0
                                 
                                 
                                 .dseg
                                 
000223                           BUTTON_IS_PRESSED: .byte 1			; updated by timer1 interrupt, used by LCD update loop
000224                           LAST_BUTTON_PRESSED: .byte 1        ; updated by timer1 interrupt, used by LCD update loop
                                 
000225                           TOP_LINE_CONTENT: .byte 16			; updated by timer4 interrupt, used by LCD update loop
000235                           CURRENT_CHARSET_INDEX: .byte 16		; updated by timer4 interrupt, used by LCD update loop
000245                           CURRENT_CHAR_INDEX: .byte 1			; ; updated by timer4 interrupt, used by LCD update loop
                                 
                                 
                                 ; =============================================
                                 ; ======= END OF "DO NOT TOUCH" SECTION =======
                                 ; =============================================
                                 
                                 
                                 ; ***************************************************
                                 ; **** BEGINNING OF THIRD "STUDENT CODE" SECTION ****
                                 ; ***************************************************
                                 
                                 .dseg
                                 
                                 ; If you should need additional memory for storage of state,
                                 ; then place it within the section. However, the items here
                                 ; must not be simply a way to replace or ignore the memory
                                 ; locations provided up above.
                                 
                                 
                                 ; ***************************************************
                                 ; ******* END OF THIRD "STUDENT CODE" SECTION *******
                                 ; ***************************************************


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   1 y  :  11 z  :   2 r0 :   1 r1 :   1 r2 :   2 r3 :   2 r4 :   2 
r5 :   2 r6 :   3 r7 :   3 r8 :   2 r9 :   2 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 278 r17:  46 r18:  28 r19:  26 r20:   0 
r21:   2 r22:   0 r23:   1 r24:   6 r25:  10 r26:   5 r27:   7 r28:  30 
r29:  28 r30:   6 r31:   6 
Registers used: 27 out of 35 (77.1%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   1 adiw  :   0 and   :   0 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   2 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   2 brmi  :   0 
brne  :   7 brpl  :   0 brsh  :   6 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  30 cbi   :   0 cbr   :  12 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   7 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   7 cpc   :   5 
cpi   :  11 cpse  :   0 dec   :   3 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  13 inc   :   1 jmp   :   8 ld    :   1 ldd   :  11 ldi   :  95 
lds   :  27 lpm   :   1 lsl   :   0 lsr   :   0 mov   :  13 movw  :   0 
mul   :   1 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :   1 pop   :  91 push  :  91 rcall :  25 ret   :  12 
reti  :   6 rjmp  :  12 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :  12 sbrc  :   4 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   1 std   :   0 sts   :  50 sub   :   0 subi  :   0 swap  :   3 
tst   :   0 wdr   :   0 
Instructions used: 41 out of 116 (35.3%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000640   1408     32   1440  262144   0.5%
[.dseg] 0x000200 0x000246      0     70     70    8192   0.9%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
